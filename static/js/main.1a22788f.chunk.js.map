{"version":3,"sources":["logo.svg","services/AppContext.js","InfoTiles/NodeInfoTile/NodeInfoTile.js","ForceGraph/ForceGraph.js","ProteinDetails/ProteinDetails.js","LandingPage/LandingPage.js","BodyDiagram/BodyDiagram.js","Navbar/Navbar.js","Acknowledgements/Acknowledgements.js","About/About.js","App.js","reportWebVitals.js","index.js"],"names":["AppContext","React","createContext","NodeInfoTile","context","useContext","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","ensemblGeneId","setEnsemblGeneId","_useState5","_useState6","_useState7","_useState8","useEffect","_getEnsemblGeneId","_asyncToGenerator","_regeneratorRuntime","mark","_callee","geneName","url","response","data","wrap","_context","prev","next","concat","fetch","headers","sent","json","id","abrupt","stop","apply","arguments","_x","getEnsemblGeneId","focusedNode","console","log","_jsxs","className","style","width","children","_jsx","margin","border","class","title","height","transform","src","paddingTop","is","ForceGraph","organName","setOrganName","setSelectedLink","subtype","setSubtype","_useState9","_useState10","_useState11","_useState12","setNodeFocused","navigate","useNavigate","location","useLocation","appicFileReader","_appicFileReader","path","fileData","then","text","_networkBuilder","_callee2","pathStringGS","pathStringGI","currGSFile","gsArray","currGIFile","giArray","myMapData","currLinks","i","miniGIArray","obj","currNodes","_i","miniGSArray","_obj","_context2","split","Map","length","source","target","value","push","label","color","state","displayOrganName","temp","charAt","toUpperCase","slice","displaySubtypeName","_useState13","_useState14","setData","_useState15","_useState16","isLoading","setIsLoading","_x2","_x3","networkBuilder","proteinList","useMemo","myList","nodes","currGeneName","_gProfilerAPICall","_callee3","myData","_context3","method","body","JSON","stringify","_useState17","_useState18","gData","setGData","_useState19","_useState20","setGDataLoading","_x4","gProfilerAPICall","myStringData","result","currResult","description","roundedNum","p_value","toExponential","parent","document","getElementById","currTable","parentNode","removeChild","table","createElement","headerRow","headerCell1","textContent","headerCell2","appendChild","row1","cell1a","cell1b","insertBefore","firstChild","geneList","filter","encodeURIComponent","_clueAPICall","_callee4","_context4","_useState21","_useState22","clueData","setClueData","_useState23","_useState24","setClueDataLoading","_x5","clueAPICall","tempGeneName","name","includes","pert_iname","clueFinalData","graphData","j","currDrugTarget","links","marginTop","marginBottom","fontSize","float","ForceGraph2D","linkWidth","link","linkColor","maxVal","Math","max","_toConsumableArray","map","d3","domain","range","colorScale","nodeSpacing","damping","d3VelocityDecay","d3AlphaDecay","onEngineInitialized","engine","d3Zoom","scaleTo","minZoom","maxZoom","nodeCanvasObject","node","ctx","globalScale","font","bckgDimensions","measureText","n","beginPath","arc","x","y","PI","fillStyle","fill","textAlign","textBaseline","fillText","__bckgDimensions","pointerArea","left","right","top","bottom","onNodeClick","setFocusedNode","onLinkClick","nodeAutoColorBy","nodeVal","enableNodeDrag","onNodeDragEnd","force","fonSize","ProteinDetails","Button","variant","onClick","LandingPage","particlesInit","useCallback","_ref","loadFull","particlesLoaded","_ref2","container","Particles","init","loaded","options","background","fullScreen","zIndex","fpsLimit","interactivity","particles","distance","enable","opacity","collisions","move","directions","outModes","default","random","speed","straight","number","density","area","shape","type","size","min","detectRetina","BodyDiagram","openModal","setOpenModal","image","imageWidth","focusedOrgan","setFocusedOrgan","subtypeNames","items","anchorEl","setAnchorEl","handleClick","handleMenuClose","Grid","rowSpacing","xs","sm","md","columnSpacing","item","motion","div","whileHover","scale","alt","e","currentTarget","AppBar","position","Menu","keepMounted","open","Boolean","onClose","MenuItem","Modal","Box","sx","bgcolor","boxShadow","p","display","flexDirection","alignItems","Typography","component","paddingBottom","justifyContent","marginLeft","marginRight","pages","settings","Navbar","_React$useState","_React$useState2","anchorElNav","setAnchorElNav","_React$useState3","_React$useState4","anchorElUser","setAnchorElUser","handleCloseNavMenu","count","handleCloseUserMenu","Container","maxWidth","Toolbar","disableGutters","noWrap","href","mr","fontFamily","fontWeight","letterSpacing","textDecoration","flexGrow","IconButton","event","MenuIcon","anchorOrigin","vertical","horizontal","transformOrigin","page","index","my","paddingLeft","paddingRight","Tooltip","Avatar","mt","setting","Acknowledgements","About","App","nodeUtils","Provider","Routes","Route","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","BrowserRouter"],"mappings":"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","file":"static/js/main.1a22788f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\n\nconst AppContext = React.createContext();\n\nexport default AppContext;\n","import React, { useEffect, useState, useContext } from 'react';\nimport ForceGraph2D from 'react-force-graph-2d';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { AppBar, Button, Menu, MenuItem, Typography } from '@mui/material';\nimport AppContext from '../../services/AppContext';\n\n\nexport default function NodeInfoTile() {\n    const context = useContext(AppContext);\n    const [proteinInfo, setProteinInfo] = useState(null);\n    const [ensemblGeneId, setEnsemblGeneId] = useState(null);\n    // Options (if implementing with strings): GC (Gene card), HPA (Human Protein Atlas)\n    const [currentAPI, setCurrentAPI] = useState(true);\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    useEffect(() => {\n        // async function getHGNCId(geneName) {\n        //     const url = `https://cors-anywhere.herokuapp.com/https://rest.genenames.org/search/alias/${geneName}`;\n        //     const response = await fetch(url, {\n        //         headers: { 'Content-Type': 'application/json' },\n        //     });\n        //     const data = await response.json();\n        //     if (data.response.numFound > 0) {\n        //         const hgncId = data.response.docs[0].hgnc_id;\n        //         // for debugging\n        //         console.log(\"hgnc id: \" + hgncId)\n        //         return hgncId;\n        //     } else {\n        //         console.log('No HGNC ID found for gene: ' + geneName);\n        //         return null;\n        //     }\n        // }\n        async function getEnsemblGeneId(geneName) {\n            const url = `https://rest.ensembl.org/lookup/symbol/homo_sapiens/${geneName}?expand=1`;\n            const response = await fetch(url, { headers: { 'Content-Type': 'application/json' } });\n            const data = await response.json();\n            setEnsemblGeneId(data.id);\n            return data.id;\n        }\n        getEnsemblGeneId(context.focusedNode);\n        console.log(context.focusedNode)\n        console.log(ensemblGeneId)\n    }, [context.focusedNode]);\n\n    const handleMenuClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMenuItemClick = (index) => {\n        setCurrentAPI(index === 1);\n        setAnchorEl(null);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n    <script type=\"module\" src=\"https://unpkg.com/x-frame-bypass\"></script>\n    return (\n        <div className='col-md-6' style={{ width: \"100%\"}}>\n            {/* <AppBar position=\"static\">\n                <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleMenuClick} color=\"inherit\">\n                    <Typography>Select your API here</Typography>\n                </Button>\n                <Menu id=\"simple-menu\" anchorEl={anchorEl} keepMounted open={Boolean(anchorEl)} onClose={handleClose}>\n                    <MenuItem onClick={() => handleMenuItemClick(1)}>Human Protein Atlas</MenuItem>\n                    <MenuItem onClick={() => handleMenuItemClick(0)}>HGNC</MenuItem>\n                </Menu>\n            </AppBar> */}\n            \n            <div style = {{margin: \"5%\", border: \"1px solid black\"}}>\n                <div class = \"leftTiles\">\n                    <iframe id=\"inlineFrameExample\"\n                        title=\"Inline Frame Example\"\n                        width=\"100%\"\n                        height=\"100%\"\n                        style={{ transform: 'scale(1)', height: \"50vh\"}}\n                        src={`https://www.proteinatlas.org/${ensemblGeneId}-${context.focusedNode}`}\n                    >\n                    </iframe>\n                </div>\n            </div>\n\n            <div style = {{margin: \"5%\", border: \"1px solid black\", paddingTop: \"5%\"}}>\n                <div class = \"leftTiles\">\n                    <iframe\n                        is=\"x-frame-bypass\"\n                        id=\"inlineFrameExample\"\n                        title=\"Inline Frame Example\"\n                        width=\"105%\"\n                        height=\"100%\"\n                        style={{ transform: 'scale(0.9)', height: \"50vh\" }}\n                        src={`https://www.genenames.org/tools/search/#!/?query=${context.focusedNode}`}\n                    >\n                    </iframe>\n                </div>\n            </div>\n{/* \n            <div style = {{margin: \"5%\", border: \"1px solid black\", paddingTop: \"5%\"}}>\n                <div class = \"leftTiles\">\n                    <iframe\n                        src=\"iframe_cbioportal.php\" \n                    >\n                    </iframe>\n                </div>\n            </div> */}\n            \n        </div>\n    )\n}","\r\nimport React, { useEffect, useState, useMemo, useContext } from 'react'\r\nimport ForceGraph2D from 'react-force-graph-2d'\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport './ForceGraph.css'\r\n// Bootstrap CSS\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Button } from '@mui/material';\r\nimport * as d3 from 'd3';\r\nimport NodeInfoTile from '../InfoTiles/NodeInfoTile/NodeInfoTile';\r\nimport AppContext from '../services/AppContext';\r\n\r\n\r\nexport default function ForceGraph() {\r\n\r\n    const context = useContext(AppContext);\r\n\r\n    const [organName, setOrganName] = useState('');\r\n    const [selectedNode, setSelectedNode] = useState(null);\r\n    const [selectedLink, setSelectedLink] = useState(null);\r\n    const [subtype, setSubtype] = useState('');\r\n    const [subtypeBackend, setSubtypeBackend] = useState('');\r\n    const [nodeFocused, setNodeFocused] = useState(false);\r\n\r\n    // So we can use react router\r\n    const navigate = useNavigate();\r\n\r\n    // To be used when a node is clicked\r\n    const handleNodeClick = (node) => {\r\n        setNodeFocused(true);\r\n        console.log('Node has been clicked');\r\n        console.log(node)\r\n        context.setFocusedNode(node.id)\r\n        console.log(context.focusedNode);\r\n        // navigate('/protein-details', { state: { organName: organName } });\r\n    };\r\n\r\n    const handleLinkClick = (link) => {\r\n        console.log(\"Clicked on link:\", link.value);\r\n        setSelectedLink(link);\r\n        navigate('/protein-details', { state: { organName: organName } });\r\n    };\r\n\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        if (location) {\r\n            console.log(location.state.organName);\r\n            var temp = location.state.organName;\r\n            var displayOrganName = temp.charAt(0).toUpperCase() + temp.slice(1);\r\n            setOrganName(displayOrganName);\r\n\r\n            var temp = location.state.subtype;\r\n            var temp = temp.split(\"_\");\r\n            var displaySubtypeName = temp[1] + \", \" + temp[0];\r\n            setSubtype(displaySubtypeName)\r\n        }\r\n    }, [location])\r\n\r\n\r\n\r\n\r\n    /*\r\n     * File Reader\r\n     * This function is a text parser, importing cancer subtype genetic data \r\n     */\r\n    async function appicFileReader(path) {\r\n        var fileData = \"initial\";\r\n\r\n        await fetch(path)\r\n            .then(response => response.text())\r\n            .then(data => { fileData = data })\r\n\r\n        return fileData\r\n    }\r\n\r\n\r\n    // Read data and build node networks\r\n    async function networkBuilder(organName, subtype) {\r\n\r\n        // Build path to files\r\n        var pathStringGS = \"masterData/\" + organName + \"/\" + subtype + \"/\" + subtype + \"_geneSet.txt\";\r\n        var pathStringGI = \"masterData/\" + organName + \"/\" + subtype + \"/\" + subtype + \"_interactions.txt\";\r\n\r\n        console.log(pathStringGI)\r\n        \r\n\r\n        // Read in genetic interaction (GI) and geneset (GS) data\r\n        var currGSFile = await appicFileReader(pathStringGS)\r\n        var gsArray = currGSFile.split(\"\\n\")\r\n        var currGIFile = await appicFileReader(pathStringGI)\r\n        var giArray = currGIFile.split(\"\\n\") //split by line\r\n\r\n\r\n        // Initiate datastructure to pass into react-force-graph\r\n        const myMapData = new Map()\r\n\r\n        // Parse content of text files. Build \"links\" for react-force-graph input\r\n        let currLinks = [];\r\n        for (let i = 1; i < giArray.length - 1; i++) {\r\n            // split by source, target, STRING\r\n            var miniGIArray = giArray[i].split(\"\\t\")\r\n            console.log(miniGIArray);\r\n\r\n            // Build object\r\n            let obj = { source: miniGIArray[0], target: miniGIArray[1], value: miniGIArray[2] / 10 }\r\n\r\n            // Add object to array\r\n            currLinks.push(obj)\r\n        }\r\n        // Add array to final map structure\r\n        myMapData[\"links\"] = currLinks;\r\n\r\n        // Parse content of text files. Build \"nodes\" for react-force-graph input\r\n        let currNodes = [];\r\n        for (let i = 1; i < gsArray.length; i++) {\r\n            // split by geneName, imputed/group, value\r\n            var miniGSArray = gsArray[i].split(\"\\t\")\r\n\r\n            // Build object\r\n            let obj = { id: miniGSArray[0], label: miniGSArray[0], color: 'lightBlue' }\r\n\r\n            // Add object to array\r\n            currNodes.push(obj)\r\n        }\r\n        // Add array to final map structure\r\n        myMapData[\"nodes\"] = currNodes\r\n\r\n        console.log(myMapData)\r\n\r\n\r\n        return myMapData;\r\n    }\r\n\r\n\r\n\r\n    // Execute functions in the proper order\r\n    // First define null variables such that the page can still load while back-end methods are running\r\n    // Then call back-end methods, and hand off to front end for display\r\n\r\n\r\n    // Define null variables\r\n    const [data, setData] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    // useEffect will allow the back-end method \"networkBuilder\" to run after HTML loads\r\n    useEffect(() => {\r\n        // See above for networkBuilder\r\n        // Builds proper datastructure to pass into react-force-graph\r\n        // myMapData is a promise. It must compute before the HTML loads\r\n        const myMapData = networkBuilder(location.state.organName, location.state.subtype)\r\n\r\n        // Set data\r\n        myMapData.then((data) => {\r\n            setData(data);\r\n            setIsLoading(false);\r\n        });\r\n    }, []);\r\n\r\n    // Create GET API calls\r\n    // const userActionGet = async () => {\r\n    //     const response = await fetch('http://example.com/movies.json');\r\n    //     const myJson = await response.json(); //extract JSON from the http response\r\n    //     // do something with myJson\r\n    // }\r\n\r\n\r\n\r\n    // Load protein list\r\n    const proteinList = useMemo(() => {\r\n        let myList = []\r\n        if (data) {\r\n            for (let i = 0; i < data.nodes.length; i++) {\r\n                let currNode = data.nodes[i];\r\n                let currGeneName = currNode.id;\r\n                myList.push(currGeneName)\r\n            }\r\n        }\r\n        return myList;\r\n    }, [data]);\r\n\r\n    // Create POST API calls\r\n    async function gProfilerAPICall(proteinList) {\r\n        console.log('running');\r\n        console.log(proteinList);\r\n        const response = await fetch('https://biit.cs.ut.ee/gprofiler/api/gost/profile/', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                'organism': 'hsapiens',\r\n                'query': proteinList\r\n            }),\r\n        });\r\n        const myData = response.json();\r\n        console.log(myData);\r\n        console.log(\"received\");\r\n\r\n        return myData;\r\n\r\n    }\r\n\r\n    const [gData, setGData] = useState(\"Loading...\");\r\n    const [isGDataLoading, setGDataLoading] = useState(true);\r\n\r\n    // useEffect will allow the back-end method \"networkBuilder\" to run after HTML loads\r\n    useEffect(() => {\r\n        // See above for networkBuilder\r\n        // Builds proper datastructure to pass into react-force-graph\r\n        // myData is a promise. It must compute before the HTML loads\r\n        const myData = gProfilerAPICall(proteinList);\r\n\r\n        // Set gData\r\n        myData.then((gData) => {\r\n            let myStringData = []\r\n            for (let i = 0; i < gData.result.length; i++) {\r\n                let currResult = gData.result[i]\r\n\r\n                // pull data\r\n                myStringData.push(currResult.description)\r\n                // var roundedNum = currResult.p_value.toPrecision(3);\r\n                var pvalue = currResult.p_value;\r\n                const roundedNum = pvalue.toExponential(3);\r\n                myStringData.push(roundedNum);\r\n\r\n            }\r\n            setGData(myStringData);\r\n            setGDataLoading(false);\r\n        });\r\n    }, [proteinList]); //rebuild HTML after the proteinList is generated and API call is ran\r\n\r\n    //Add gProf to table html\r\n    useMemo(() => {\r\n        if (gData == \"Loading...\") {\r\n            console.log(\"here\")\r\n            var parent = document.getElementById('gprofTableDiv');\r\n            \r\n        }\r\n        if (gData != \"Loading...\") {\r\n            //Build initial table\r\n            var currTable = document.getElementById('gprofTable');\r\n            \r\n            if (currTable) {\r\n                currTable.parentNode.removeChild(currTable);\r\n            }\r\n\r\n            var table = document.createElement('table');\r\n            table.id = 'gprofTable';\r\n            var headerRow = document.createElement('tr');\r\n            var headerCell1 = document.createElement('th');\r\n            headerCell1.textContent = 'Pathway';\r\n            var headerCell2 = document.createElement('th');\r\n            headerCell2.textContent = 'p-value';\r\n            headerRow.appendChild(headerCell1);\r\n            headerRow.appendChild(headerCell2);\r\n            table.appendChild(headerRow);\r\n\r\n            for (let i = 0; i < gData.length; i++) {\r\n                //Drug name, col1\r\n                var row1 = document.createElement('tr');\r\n                var cell1a = document.createElement('td');\r\n                cell1a.textContent = gData[i];\r\n\r\n                i++;\r\n\r\n                //Gene target, col2\r\n                var cell1b = document.createElement('td');\r\n                cell1b.textContent = gData[i];\r\n\r\n                //Append\r\n                row1.appendChild(cell1a);\r\n                row1.appendChild(cell1b);\r\n                table.appendChild(row1);\r\n            }\r\n\r\n            var parent = document.getElementById('gprofTableDiv');\r\n            parent.insertBefore(table, parent.firstChild);\r\n\r\n        }\r\n    }, [gData]);\r\n\r\n\r\n    /*\r\n     * Clue.io API calls\r\n     * input is gene, output are existing drugs that target the gene\r\n     */\r\n    // Load gene list\r\n    const geneList = useMemo(() => {\r\n        let myList = []\r\n        if (data) {\r\n            for (let i = 0; i < data.nodes.length; i++) {\r\n                let currNode = data.nodes[i];\r\n                let currGeneName = currNode.id;\r\n                myList.push(currGeneName)\r\n            }\r\n        }\r\n\r\n        let filter = {\r\n            \"where\": {\r\n                \"gene_symbol\": {\r\n                    \"ing\": myList\r\n                }\r\n            }\r\n        }\r\n\r\n        const queryString = `filter=${encodeURIComponent(JSON.stringify(filter))}`;\r\n\r\n        return queryString;\r\n    }, [data]);\r\n\r\n    // Create API call\r\n    async function clueAPICall(geneList) {\r\n        let searchURI = `https://api.clue.io/api/rep_drug_targets/?{queryString}%22%7D%7D&user_key=814d4d42c94e6545cd37185ff4bf0270`\r\n        // Note, this is Benjamin Ahn's unique API key!\r\n        const response = await fetch(searchURI, {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        });\r\n        const myData = response.json();\r\n\r\n        return myData;\r\n\r\n    }\r\n\r\n    const [clueData, setClueData] = useState(\"Loading...\");\r\n    const [isClueDataLoading, setClueDataLoading] = useState(true);\r\n\r\n    // useEffect will allow the back-end method \"networkBuilder\" to run after HTML loads\r\n    useEffect(() => {\r\n        // See above for networkBuilder\r\n        // Builds proper datastructure to pass into react-force-graph\r\n        // myData is a promise. It must compute before the HTML loads\r\n        const myData = clueAPICall(geneList);\r\n\r\n        // Set clueData\r\n        myData.then((clueData) => {\r\n            let myStringData = []\r\n            for (let i = 0; i < clueData.length; i++) {\r\n                let currResult = clueData[i]\r\n\r\n                let tempGeneName = currResult.name\r\n                if (geneList.includes(tempGeneName)) {\r\n                    // pull data\r\n                    myStringData.push(currResult.pert_iname) //drug name\r\n                    myStringData.push(currResult.name) //gene target\r\n                }\r\n\r\n            }\r\n            setClueData(myStringData);\r\n            setClueDataLoading(true);\r\n        });\r\n    }, [geneList]); //rebuild HTML after the proteinList is generated and API call is ran\r\n\r\n    const clueFinalData = useMemo(() => {\r\n        if (clueData) {\r\n            return {\r\n                clueData\r\n            };\r\n        }\r\n    }, [clueData]);\r\n\r\n\r\n    //Handle colors\r\n    const handleLinkColor = (link) => {\r\n        const value = link.value;\r\n        const maxVal = Math.max(...data.links.map((link) => link.value)); // get maximum value\r\n        const minColor = '#FF8C00'; // minimum color\r\n        const maxColor = '#FFA07A'; // maximum color\r\n        const colorScale = d3.scaleLinear().domain([0, maxVal]).range([minColor, maxColor]); // define color scale\r\n        return colorScale(value); // return color based on value\r\n    };\r\n\r\n    // Adjust graphData nodes by color based on Clue.io\r\n    const graphData = useMemo(() => {\r\n        if (data) {\r\n            if (clueFinalData) {\r\n                for (let j = 1; j < clueFinalData.clueData.length; j++) {\r\n                    var currDrugTarget = clueFinalData.clueData[j]\r\n                    j++\r\n\r\n                    for (let i = 0; i < data.nodes.length; i++) {\r\n                        var currNode = data.nodes[i]\r\n                        if (currDrugTarget == currNode.id) {\r\n                            data.nodes[i].color = 'red'\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    nodes: data.nodes,\r\n                    links: data.links,\r\n                };\r\n            }\r\n        }\r\n    }, [clueFinalData]);\r\n\r\n    //Add Clue.io to table html\r\n\r\n    useMemo(() => {\r\n        if (clueFinalData.clueData != \"Loading...\") {\r\n            //Build initial table\r\n            const currTable = document.getElementById(\"clueioTable\");\r\n            if (currTable) {\r\n                currTable.parentNode.removeChild(currTable);\r\n            }\r\n            var table = document.createElement('table');\r\n            table.id = 'clueioTable';\r\n            var headerRow = document.createElement('tr');\r\n            var headerCell1 = document.createElement('th');\r\n            headerCell1.textContent = 'Drug Name';\r\n            var headerCell2 = document.createElement('th');\r\n            headerCell2.textContent = 'Gene Target';\r\n            headerRow.appendChild(headerCell1);\r\n            headerRow.appendChild(headerCell2);\r\n            table.appendChild(headerRow);\r\n\r\n\r\n            for (let i = 0; i < clueFinalData.clueData.length; i++) {\r\n                //Drug name, col1\r\n                var row1 = document.createElement('tr');\r\n                var cell1a = document.createElement('td');\r\n                cell1a.textContent = clueFinalData.clueData[i];\r\n\r\n                i++;\r\n\r\n                //Gene target, col2\r\n                var cell1b = document.createElement('td');\r\n                cell1b.textContent = clueFinalData.clueData[i];\r\n\r\n                //Append\r\n                row1.appendChild(cell1a);\r\n                row1.appendChild(cell1b);\r\n                table.appendChild(row1);\r\n            }\r\n\r\n            var parent = document.getElementById('clueioTableDiv');\r\n            parent.insertBefore(table, parent.firstChild);\r\n\r\n        }\r\n    }, [clueFinalData]);\r\n\r\n    //Loading screens for HTML as APIs run\r\n\r\n    // If node data is not present, show a loading screen\r\n    if (isLoading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    const handleEngineInitialized = (engine) => {\r\n        engine.d3Zoom.scaleTo(2); // sets initial zoom level to 2x\r\n    };\r\n\r\n\r\n\r\n    // Final HTML return\r\n    return (\r\n        <div style = {{height : \"100%\"}}>\r\n            <div style={{}}>\r\n                <h1 style={{ marginTop: '5vh', marginBottom: '1vh', width: \"100%\", fontSize: '5vh', float:'left' }}>{organName}</h1>\r\n                <h1 style = {{fontSize: '3vh', marginBottom: \"5vh\", float:'left', width: \"100%\"}}>Subtype: {subtype}</h1>\r\n            </div>\r\n\r\n            <div id = \"nodeDiagram\">\r\n                <h1 style={{fontSize:'3vh'}}>Protein-Protein Network</h1>\r\n                <ForceGraph2D\r\n                    graphData={graphData}\r\n                    width={700}\r\n                    height={400}\r\n                    linkWidth={link => link.value / 15}\r\n                    linkColor={handleLinkColor} // sets the color of the links based on their value\r\n                    nodeSpacing={100}\r\n                    damping={0.9}\r\n                    d3VelocityDecay={0.9} // reduces the velocity decay\r\n                    d3AlphaDecay={0.1} // reduces the alpha decay\r\n                    onEngineInitialized={handleEngineInitialized}\r\n                    minZoom={2.5} // sets minimum zoom level\r\n                    maxZoom={10} // sets maximum zoom level\r\n                    // nodeAutoColorBy=\"group\"                 \r\n\r\n                    nodeCanvasObject={(node, ctx, globalScale) => {\r\n                        const label = node.id;\r\n                        const fontSize = 12 / globalScale;\r\n                        ctx.font = `${fontSize}px Sans-Serif`;\r\n                        const textWidth = ctx.measureText(label).width;\r\n                        const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2); // some padding\r\n\r\n                        // draw circle around text label\r\n                        ctx.beginPath();\r\n                        ctx.arc(node.x, node.y, bckgDimensions[0] / 2, 0, 2 * Math.PI);\r\n                        ctx.fillStyle = node.color;\r\n                        ctx.fill();\r\n\r\n                        // Node text styling\r\n                        ctx.textAlign = 'center';\r\n                        ctx.textBaseline = 'middle';\r\n                        ctx.fillStyle = 'black';\r\n                        ctx.fillText(label, node.x, node.y);\r\n\r\n                        node.__bckgDimensions = bckgDimensions;\r\n                        // Not too sure about this stuff\r\n                        node.pointerArea = {\r\n                            left: node.x - bckgDimensions[0] / 2,\r\n                            right: node.x + bckgDimensions[0] / 2,\r\n                            top: node.y - bckgDimensions[1] / 2,\r\n                            bottom: node.y + bckgDimensions[1] / 2,\r\n                        };\r\n\r\n                    }}\r\n                    // When the node is clicked\r\n                    onNodeClick={handleNodeClick}\r\n                    onLinkClick={handleLinkClick}\r\n                    nodeAutoColorBy='label'\r\n                    nodeVal={node => 10}\r\n                    enableNodeDrag={true}\r\n                    onNodeDragEnd={(node, force) => {\r\n                        console.log(node);\r\n                    }}\r\n                />\r\n            </div>\r\n            <h1 style = {{fontSize:\"3vh\"}}>Info</h1>\r\n            <div id = \"allTiles\">\r\n                <NodeInfoTile />\r\n\r\n                    <div  style={{ border: '1px solid black', margin : \"5%\"}}>\r\n                        <p style={{fonSize: \"2vh\"}}>Drug Repurposing Results</p>\r\n                        <p class='tileDescription'>\r\n                            All genes inputed into <b>CLUE</b>. Genes with existing drugs are displayed and highlighted in red in the diagram.\r\n                        </p>\r\n                        <div id=\"clueioTableDiv\"></div>\r\n                    </div>\r\n                    <div  style={{ border: '1px solid black', margin: \"5%\"}}>\r\n                        <p>Relevant Pathways</p>\r\n                        <p class='tileDescription'>\r\n                            All genes inputed into <b>gProfiler</b>. Output include involved biological pathways and associated p-values.\r\n                        </p>\r\n                        <div id=\"gprofTableDiv\"></div>\r\n                    </div>\r\n\r\n            </div>\r\n            \r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport \"./ProteinDetails.css\"\nimport { Button } from '@mui/material';\n\nexport default function ProteinDetails() {\n    const navigate = useNavigate();\n    const [organName, setOrganName] = useState('');\n\n    const location = useLocation();\n\n    useEffect(() => {\n        if (location) {\n            setOrganName(location.state.organName)\n        }\n    }, [location])\n\n    return (\n        <div className='parent'>\n            <div className='layout'>\n                <h2>{organName} Cancer Protein Details</h2>\n                <Button\n                    variant='contained'\n                    onClick={() => {\n                        navigate('/PPI-graph', {state: {organName: organName}})\n                    }}>\n                    Go back to PPI Network\n                </Button>\n            </div>\n        </div>\n    )\n}\n","import { Button } from '@mui/material';\nimport React from 'react'\nimport { useNavigate } from 'react-router-dom';\nimport './LandingPage.css'\nimport { useCallback } from \"react\";\nimport Particles from 'react-tsparticles';\nimport { loadFull } from \"tsparticles\";\n\nexport default function LandingPage() {\n    const navigate = useNavigate();\n\n    const particlesInit = useCallback(async engine => {\n        console.log(engine);\n        // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n        // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n        // starting from v2 you can add only the features you need reducing the bundle size\n        await loadFull(engine);\n    }, []);\n\n    const particlesLoaded = useCallback(async container => {\n        await console.log(container);\n    }, []);\n\n    return (\n        <div className='parent'>\n            <Particles\n                id=\"tsparticles\"\n                init={particlesInit}\n                loaded={particlesLoaded}\n                options={{\n                    background: {\n                        color: {\n                            value: \"#FFFFFF\",\n                        },\n                    },\n                    fullScreen: {\n                        // enable: true,\n                        zIndex: -1\n                    },\n                    fpsLimit: 120,\n                    interactivity: {\n\n                    },\n                    particles: {\n                        color: {\n                            value: \"#89CFF0\",\n                        },\n                        links: {\n                            color: \"#808080\",\n                            distance: 150,\n                            enable: true,\n                            opacity: 0.5,\n                            width: 1,\n                        },\n                        collisions: {\n                            enable: false,\n                        },\n                        move: {\n                            directions: \"none\",\n                            enable: true,\n                            outModes: {\n                                default: \"bounce\",\n                            },\n                            random: false,\n                            speed: 3,\n                            straight: false,\n                        },\n                        number: {\n                            density: {\n                                enable: true,\n                                area: 800,\n                            },\n                            value: 80,\n                        },\n                        opacity: {\n                            value: 0.5,\n                        },\n                        shape: {\n                            type: \"circle\",\n                        },\n                        size: {\n                            value: { min: 5, max: 10 },\n                        },\n                    },\n                    detectRetina: true,\n                }}\n            />\n            <div className='layout'>\n                <h1>APPIC</h1>\n                <p>Protein - Protein Interactions, Visualized</p>\n                <p id =\"landingPageDescription\">Atlas of Protein-Protein Interactions in Cancer (APPIC)  is a web-based tool that helps users visualize the protein-protein interactions (PPIs) of various cancer types and subtypes. By understanding the PPIs, researchers and clinicians can develop more targeted and effective treatment strategies, leading to improved clinical outcomes.</p>\n                <p id = \"landingPageDescription\">Beta-Version, April 2023</p>\n                <Button\n                    variant='contained'\n                    onClick={() => {\n                        navigate('/body-diagram');\n                    }}\n                >Start</Button>\n            </div>\n        </div>\n    )\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid } from '@mui/material';\nimport { motion } from 'framer-motion';\nimport { useNavigate } from 'react-router-dom';\n\nimport { Box, Button, Typography, Modal, Menu, MenuItem, AppBar } from '@mui/material'\n\nexport default function BodyDiagram() {\n    const navigate = useNavigate();\n\n    const [openModal, setOpenModal] = useState(false);\n    const [focusedOrgan, setFocusedOrgan] = useState(\n        {\n            name: '',\n            image: '',\n            imageWidth: '',\n        });\n    const handleOpen = () => setOpenModal(true);\n    const handleClose = () => setOpenModal(false);\n\n    // TODO: CHANGE TO THESE TYPES OF CANCER: \n    // thyroid carcinoma, lung squamous cell carcinoma, cholangiocarcinoma (gallbladder), colorectal adenocarcinoma, breast cancer, prostate adenocarcinoma, bladder cancer, pancreatic adenocarcinoma\n\n    const [items, setItems] = useState([\n        {\n            name: 'bladder',\n            image: './images/bladder.png',\n            imageWidth: '100%',\n            subtypeNames: [\n                \"Cell2017_nonPapillary\",\n                \"Cell2017_papillary\",\n                \"Nature2014_papillary\",\n                \"C35\",\n                \"C91\",\n                \"C145\",\n                \"C271\",\n                \"C369\"\n            ],\n        },\n        {\n            name: 'brain',\n            image: './images/brain_real.png',\n            imageWidth: '100%',\n            subtypeNames: [\n                \"gbm_subgrouping_C15\",\n                \"gbm_subgrouping_C68\",\n                \"gbm_subgrouping_C120\"\n            ],\n        },\n        {\n            name: 'breast',\n            image: './images/breast.png',\n            imageWidth: '100%',\n            subtypeNames: [\n                \"brca_mmr_deficient\",\n                \"brca_mmr_intact\",\n                \"brca_ductal_C106\",\n                \"brca_ductal_C143\",\n                \"brca_lobular_C16\",\n                \"brca_lobular_C234\",\n                \"brca_claudin-low_subgrouping_C15\",\n                \"brca_claudin-low_subgrouping_C145\",\n                \"brca_claudin-low_subgrouping_C180\"\n            ],\n        },\n        {\n            name: 'colon and colorectal',\n            image: './images/colon.png',\n            imageWidth: '60%',\n            subtypeNames: [\"CRC_CIN_CIN_GS_MSI\", \"CRC_GS_CIN_MSI_GS\", \"CRC_MSI_CIN_GS_MSI\", \"mutatedbraf\", \"metastatic\", \"nonmetastatic\"],\n        },\n        {\n            name: 'gallbladder',\n            image: './images/gallbladder.png',\n            imageWidth: '100%',\n            subtypeNames: [\"cholangiocarcinoma\"],\n        },\n        {\n            name: 'lung',\n            image: './images/lung.png',\n            imageWidth: '100%',\n            subtypeNames: [\n                \"Adenocarcinoma_acinar_VSbronchioloalverolar\",\n                \"Adenocarcinoma_acinar_VSpapillary\",\n                \"Squamous_basaloid\",\n                \"Squamous_papillary\",\n                \"luad_subgrouping_C28\",\n                \"luad_subgrouping_C81\",\n                \"luad_subgrouping_C151\",\n                \"luad_subgrouping_C212\",\n                \"luad_subgrouping_C257\",\n                \"luad_subgrouping_C294\"\n\n            ],\n        },\n        {\n            name: 'ovarian',\n            image: './images/ovaries.png',\n            imageWidth: '100%',\n            subtypeNames: [\n                \"OCTop100C15\",\n                \"OCTop100C145\",\n                \"OCTop100C196\",\n                \"OCTop100C246\"\n\n            ],\n        },\n        {\n            name: 'pancreas',\n            image: './images/pancreas.png',\n            imageWidth: '100%',\n            subtypeNames: [\"pancreaticAdenocarcinoma\"],\n        },\n        {\n            name: 'prostate',\n            image: './images/prostate.png',\n            imageWidth: '100%',\n            subtypeNames: [\"erg\", \"spop\"],\n        },\n        {\n            name: 'thyroid',\n            image: './images/thyroid.png',\n            imageWidth: '100%',\n            subtypeNames: [\"follicular\", \"papillary\"],\n        }\n    ]);\n\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const handleClick = (subtype) => {\n        navigate('/PPI-graph', { state: { organName: focusedOrgan.name, subtype: subtype } });\n    };\n\n    const handleMenuClick = (event) => {\n        setAnchorEl(event.currentTarget);\n        console.log(anchorEl)\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n    };\n\n\n    const style = {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: \"40%\",\n        bgcolor: 'background.paper',\n        border: '1px solid #808080',\n        boxShadow: 24,\n        p: 4,\n    };\n\n    return (\n        <div>\n            <h1 style={{ marginBottom: '9vh', marginTop: '2vh' }}>Cancer Types</h1>\n            <Grid container rowSpacing={{ xs: 6, sm: 12, md: 18 }} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\n                {items.map((item) => (\n                    // Change the number foo in xs={foo} so that 12 / foo is the number of rows you want\n                    <Grid item xs={2.4} key={item.name}>\n                        <motion.div whileHover={{ scale: 1.08 }}>\n                            <img\n                                src={item.image}\n                                alt={item.name}\n                                style={{ width: item.imageWidth }}\n                                onClick={(e) => {\n                                    // handleOpen();\n                                    handleMenuClick(e);\n                                    setFocusedOrgan(item);\n                                }} \n                                // onClick={handleMenuClick}\n                                />\n                        </motion.div>\n                        <h4>{item.name}</h4>\n                        <AppBar position=\"static\">\n                            <Menu id=\"simple-menu\" anchorEl={anchorEl} keepMounted open={Boolean(anchorEl)} onClose={handleMenuClose}>\n                                {focusedOrgan.subtypeNames && focusedOrgan.subtypeNames.map((subtype) => (\n                                    <MenuItem onClick={() => handleClick(subtype)}>{subtype}</MenuItem>\n                                ))}\n                            </Menu>\n                        </AppBar>\n                    </Grid>\n                ))}\n            </Grid>\n            <Modal\n                open={openModal}\n                onClose={handleClose}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n            >\n                <Box sx={style}>\n                    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n                        <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\" style={{ paddingBottom: '0.8vh' }}>\n                            Choose a {focusedOrgan.name} Cancer Subtype\n                        </Typography>\n                    </div>\n                    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '1em' }}>\n                        <img\n                            src={focusedOrgan.image}\n                            alt={focusedOrgan.name}\n                            style={{ width: focusedOrgan.imageWidth }}\n                        />\n                    </div>\n                    <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center', marginTop: '2em' }}>\n                        {focusedOrgan.subtypeNames && focusedOrgan.subtypeNames.map((subtype) => (\n                            <Button\n                                type=\"submit\"\n                                variant='contained'\n                                size='large'\n                                style={{ fontSize: '1vw', marginLeft: '1.2em', marginRight: '1.2em' }}\n                                color=\"primary\"\n                                onClick={() => handleClick(subtype)}\n                            >\n                                {subtype}\n                            </Button>\n                        ))}\n                    </div>\n                </Box>\n            </Modal>\n        </div>\n    );\n}\n","import * as React from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport Menu from '@mui/material/Menu';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport Container from '@mui/material/Container';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport Tooltip from '@mui/material/Tooltip';\nimport MenuItem from '@mui/material/MenuItem';\nimport { useNavigate } from 'react-router-dom';\n\n\nconst pages = [\n    { title: 'Home Page', path: '/' },\n    { title: 'About', path:'/about'},\n    { title: 'Acknolwedgements', path:'/acknowledgements'}\n  ];\nconst settings = ['Profile', 'Account', 'Dashboard', 'Logout'];\n\nfunction Navbar() {\n    const navigate = useNavigate();\n\n    const [anchorElNav, setAnchorElNav] = React.useState(null);\n    const [anchorElUser, setAnchorElUser] = React.useState(null);\n\n    const handleOpenNavMenu = (event) => {\n        setAnchorElNav(event.currentTarget);\n    };\n    const handleOpenUserMenu = (event) => {\n        setAnchorElUser(event.currentTarget);\n    };\n\n    const handleCloseNavMenu = (count) => {\n        navigate(pages[count].path);\n        setAnchorElNav(null);\n\n    };\n\n    const handleCloseUserMenu = () => {\n        setAnchorElUser(null);\n    };\n\n    return (\n        <AppBar position=\"static\">\n            <Container maxWidth=\"xl\">\n                <Toolbar disableGutters>\n                    <Typography\n                        variant=\"h6\"\n                        noWrap\n                        component=\"a\"\n                        href=\"/\"\n                        sx={{\n                            mr: 2,\n                            display: { xs: 'none', md: 'flex' },\n                            fontFamily: 'monospace',\n                            fontWeight: 700,\n                            letterSpacing: '.3rem',\n                            color: 'inherit',\n                            textDecoration: 'none',\n                        }}\n                    >\n                        APPIC\n                    </Typography>\n\n                    <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\n                        <IconButton\n                            size=\"large\"\n                            aria-label=\"account of current user\"\n                            aria-controls=\"menu-appbar\"\n                            aria-haspopup=\"true\"\n                            onClick={handleOpenNavMenu}\n                            color=\"inherit\"\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Menu\n                            id=\"menu-appbar\"\n                            anchorEl={anchorElNav}\n                            anchorOrigin={{\n                                vertical: 'bottom',\n                                horizontal: 'left',\n                            }}\n                            keepMounted\n                            transformOrigin={{\n                                vertical: 'top',\n                                horizontal: 'left',\n                            }}\n                            open={Boolean(anchorElNav)}\n                            onClose={handleCloseNavMenu}\n                            sx={{\n                                display: { xs: 'block', md: 'none' },\n                            }}\n                        >\n                            {pages.map((page, index) => (\n                                <MenuItem key={page.title} onClick={() => handleCloseNavMenu(index)}>\n                                    <Typography textAlign=\"center\">{page.title}</Typography>\n                                </MenuItem>\n                            ))}\n                        </Menu>\n                    </Box>\n\n                    <Typography\n                        variant=\"h5\"\n                        noWrap\n                        component=\"a\"\n                        href=\"\"\n                        sx={{\n                            mr: 2,\n                            display: { xs: 'flex', md: 'none' },\n                            flexGrow: 1,\n                            fontFamily: 'monospace',\n                            fontWeight: 700,\n                            letterSpacing: '.3rem',\n                            color: 'inherit',\n                            textDecoration: 'none',\n                        }}\n                    >\n                        APPIC\n                    </Typography>\n                    <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\n                        {pages.map((page, index) => (\n                            <Button\n                                key={page.title}\n                                onClick={() => handleCloseNavMenu(index)}\n                                sx={{ my: 2, color: 'white', display: 'block', paddingLeft: '1%', paddingRight: '1%', '&:hover': {color:'black'}}}\n                            >\n                                {page.title}\n                            </Button>\n                        ))}\n                    </Box>\n\n                    <Box sx={{ flexGrow: 0 }}>\n                        <Tooltip title=\"Open settings\">\n                            <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\n                                <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/2.jpg\" />\n                            </IconButton>\n                        </Tooltip>\n                        <Menu\n                            sx={{ mt: '45px' }}\n                            id=\"menu-appbar\"\n                            anchorEl={anchorElUser}\n                            anchorOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right',\n                            }}\n                            keepMounted\n                            transformOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right',\n                            }}\n                            open={Boolean(anchorElUser)}\n                            onClose={handleCloseUserMenu}\n                        >\n                            {settings.map((setting) => (\n                                <MenuItem key={setting} onClick={handleCloseUserMenu}>\n                                    <Typography textAlign=\"center\">{setting}</Typography>\n                                </MenuItem>\n                            ))}\n                        </Menu>\n                    </Box>\n                </Toolbar>\n            </Container>\n        </AppBar>\n    );\n}\nexport default Navbar","import { Button } from '@mui/material';\nimport React from 'react'\nimport { useNavigate } from 'react-router-dom';\nimport './Acknowledgements.css'\nimport { useCallback } from \"react\";\nimport Particles from 'react-tsparticles';\nimport { loadFull } from \"tsparticles\";\n\nexport default function Acknowledgements() {\n    const navigate = useNavigate();\n\n    const particlesInit = useCallback(async engine => {\n        console.log(engine);\n        // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n        // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n        // starting from v2 you can add only the features you need reducing the bundle size\n        await loadFull(engine);\n    }, []);\n\n    const particlesLoaded = useCallback(async container => {\n        await console.log(container);\n    }, []);\n\n    return (\n        <div className='parent'>\n            <Particles\n                id=\"tsparticles\"\n                init={particlesInit}\n                loaded={particlesLoaded}\n                options={{\n                    background: {\n                        color: {\n                            value: \"#FFFFFF\",\n                        },\n                    },\n                    fullScreen: {\n                        // enable: true,\n                        zIndex: -1\n                    },\n                    fpsLimit: 120,\n                    interactivity: {\n\n                    },\n                    particles: {\n                        color: {\n                            value: \"#89CFF0\",\n                        },\n                        links: {\n                            color: \"#808080\",\n                            distance: 150,\n                            enable: true,\n                            opacity: 0.5,\n                            width: 1,\n                        },\n                        collisions: {\n                            enable: false,\n                        },\n                        move: {\n                            directions: \"none\",\n                            enable: true,\n                            outModes: {\n                                default: \"bounce\",\n                            },\n                            random: false,\n                            speed: 3,\n                            straight: false,\n                        },\n                        number: {\n                            density: {\n                                enable: true,\n                                area: 800,\n                            },\n                            value: 80,\n                        },\n                        opacity: {\n                            value: 0.5,\n                        },\n                        shape: {\n                            type: \"circle\",\n                        },\n                        size: {\n                            value: { min: 5, max: 10 },\n                        },\n                    },\n                    detectRetina: true,\n                }}\n            />\n\n            <div id='acknowledgements' className='layout'>\n                <h1>Acknolwedgements</h1>\n                <p>Brown University</p>\n                <p>Benjamin Ahn, BS, Caden Chou, Jennifer Chen, Charissa Chou, BS, Dr. Ece Uzun, PhD*, Dr. Alper Uzun, PhD*</p>\n                <p>* equal contributing authors</p>\n            </div>\n        </div>\n    )\n}\n","import { Button } from '@mui/material';\nimport React from 'react'\nimport { useNavigate } from 'react-router-dom';\nimport './About.css'\nimport { useCallback } from \"react\";\nimport Particles from 'react-tsparticles';\nimport { loadFull } from \"tsparticles\";\n\nexport default function About() {\n    const navigate = useNavigate();\n\n    const particlesInit = useCallback(async engine => {\n        console.log(engine);\n        // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n        // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n        // starting from v2 you can add only the features you need reducing the bundle size\n        await loadFull(engine);\n    }, []);\n\n    const particlesLoaded = useCallback(async container => {\n        await console.log(container);\n    }, []);\n\n    return (\n        <div className='parent'>\n            <Particles\n                id=\"tsparticles\"\n                init={particlesInit}\n                loaded={particlesLoaded}\n                options={{\n                    background: {\n                        color: {\n                            value: \"#FFFFFF\",\n                        },\n                    },\n                    fullScreen: {\n                        // enable: true,\n                        zIndex: -1\n                    },\n                    fpsLimit: 120,\n                    interactivity: {\n\n                    },\n                    particles: {\n                        color: {\n                            value: \"#89CFF0\",\n                        },\n                        links: {\n                            color: \"#808080\",\n                            distance: 150,\n                            enable: true,\n                            opacity: 0.5,\n                            width: 1,\n                        },\n                        collisions: {\n                            enable: false,\n                        },\n                        move: {\n                            directions: \"none\",\n                            enable: true,\n                            outModes: {\n                                default: \"bounce\",\n                            },\n                            random: false,\n                            speed: 3,\n                            straight: false,\n                        },\n                        number: {\n                            density: {\n                                enable: true,\n                                area: 800,\n                            },\n                            value: 80,\n                        },\n                        opacity: {\n                            value: 0.5,\n                        },\n                        shape: {\n                            type: \"circle\",\n                        },\n                        size: {\n                            value: { min: 5, max: 10 },\n                        },\n                    },\n                    detectRetina: true,\n                }}\n            />\n\n            <div id='about' className='layout'>\n                <h1>About</h1>\n                <p>Brown University</p>\n                <p>Benjamin Ahn, BS, Caden Chou, Jennifer Chen, Charissa Chou, BS, Dr. Ece Uzun, PhD*, Dr. Alper Uzun, PhD*</p>\n                <p>* equal contributing authors</p>\n            </div>\n        </div>\n    )\n}\n","import logo from './logo.svg';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport ForceGraph from './ForceGraph/ForceGraph';\nimport { Routes, Route } from \"react-router-dom\";\nimport ProteinDetails from './ProteinDetails/ProteinDetails';\nimport LandingPage from './LandingPage/LandingPage';\nimport BodyDiagram from './BodyDiagram/BodyDiagram';\nimport AppContext from './services/AppContext';\nimport Navbar from './Navbar/Navbar';\nimport Acknowledgements from \"./Acknowledgements/Acknowledgements\";\nimport About from \"./About/About\";\n\n\nfunction App() {\n  const [focusedNode, setFocusedNode] = useState(\"\");\n\n  const nodeUtils = {\n    focusedNode: focusedNode,\n    setFocusedNode,\n  }\n\n  return (\n    <AppContext.Provider value={nodeUtils}>\n      <div className=\"App\">\n        <Navbar></Navbar>\n        <Routes>\n          <Route path='/' element={<LandingPage />} />\n          <Route path='/body-diagram' element={<BodyDiagram />} />\n          <Route path='/PPI-graph' element={<ForceGraph />} />\n          <Route path='/protein-details' element={<ProteinDetails />} />\n          <Route path='/acknowledgements' element={<Acknowledgements />} />\n          <Route path='/about' element={<About />} />\n        </Routes>\n      </div>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}